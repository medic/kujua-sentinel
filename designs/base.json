{
    "lib": {
        "filters": "exports.update_clinics = function(doc) {\n    return doc.form &&\n        doc.related_entities &&\n        !doc.related_entities.clinic;\n};\n\nexports.update_scheduled_reports = function(doc) {\n    return doc.form &&\n        doc.year &&\n        (doc.month || doc.week || doc.week_number) &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_birth_report = function(doc) {\n    return doc.form === 'OBIR' &&\n        doc.patient_id &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_emergency_report = function(doc) {\n    return doc.form === 'OEMR' &&\n        doc.patient_id &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_notifications = function(doc) {\n    return doc.form === 'ONOT' &&\n        doc.patient_id &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.ohw_registration = function(doc) {\n    return doc.form === 'ORPT' &&\n        doc.related_entities &&\n        doc.related_entities.clinic &&\n        !doc.patient_id;\n};\n\nexports.ohw_counseling = function(doc) {\n    return doc.form === 'OAPC' &&\n        doc.patient_id &&\n        doc.related_entities &&\n        doc.related_entities.clinic;\n};\n\nexports.twilio_message = function(doc) {\n    var tasks = doc.tasks || [];\n\n    return tasks.some(function(task) {\n        return task.state === 'pending';\n    });\n};\n\n/* documents where configuration changes live */\nexports.config_docs = function(doc) {\n    return doc._id === '_design/kujua-lite';\n};\n\nexports.update_sent_by = function(doc) {\n    return doc.from && doc.type === 'data_record' && doc.sent_by === undefined;\n}\n\nexports.update_sent_forms = function(doc) {\n    return doc.form &&\n        doc.reported_date &&\n        doc.related_entities &&\n        doc.related_entities.clinic &&\n        doc.related_entities.clinic._id;\n}\n",
        "index": "exports.views = require('./views');\nexports.filters = require('./filters');\n",
        "views": "exports.patient_ids_by_form_clinic_and_reported_date = {\n    map: function(doc) {\n        if (!doc.patient_id\n            || !doc.reported_date\n            || !doc.related_entities\n            || !doc.related_entities.clinic\n            || !doc.form) return;\n        var cl_id = doc.related_entities.clinic._id;\n        emit([doc.form, doc.patient_id, cl_id, doc.reported_date], null);\n    }\n};\n\nexports.serial_numbers_by_form_clinic_and_reported_date = {\n    map: function(doc) {\n        if (!doc.serial_number\n            || !doc.reported_date\n            || !doc.related_entities\n            || !doc.related_entities.clinic\n            || !doc.form) return;\n        var cl_id = doc.related_entities.clinic._id;\n        emit([doc.form, doc.serial_number, cl_id, doc.reported_date], null);\n    }\n};\n\nexports.due_tasks = {\n    map: function(doc) {\n        var tasks = doc.scheduled_tasks || [];\n\n        tasks.forEach(function(task, index) {\n            if (task.due && task.state === 'scheduled') {\n                emit(task.due, task);\n            }\n        });\n    }\n};\n\n/*\n * Get clinic based on phone number\n */\nexports.clinic_by_phone = {\n    map: function(doc) {\n        if (doc.type === 'clinic' && doc.contact && doc.contact.phone) {\n            emit([doc.contact.phone], null);\n        }\n    }\n};\n\n/*\n * Get clinic based on reference id\n */\nexports.clinic_by_refid = {\n    map: function (doc) {\n        if (doc.type === 'clinic' && doc.contact && doc.contact.rc_code) {\n            // need String because rewriter wraps everything in quotes\n            emit([String(doc.contact.rc_code)], null);\n        }\n    }\n};\n\nexports.ohw_registered_patients = {\n    map: function(doc) {\n        if (doc.form === 'ORPT' && doc.patient_id) {\n            emit(doc.patient_id, null);\n        }\n    }\n};\n\nexports.registered_patients = {\n    map: function(doc) {\n        if (doc.form && doc.patient_id) {\n            emit(doc.patient_id, null);\n        }\n    }\n}\n\nexports.last_valid_seq = {\n    map: function(doc) {\n        var transitions = doc.transitions || {};\n            keys = Object.keys(transitions);\n\n        keys.forEach(function(key) {\n            emit(key, transitions[key]);\n        });\n    }, reduce: function(keys, values) {\n        return values.reduce(function(memo, result) {\n            if (memo.ok) {\n                if (!result.ok || result.seq > memo.seq) {\n                   return result;\n                } else {\n                   return memo;\n                }\n            } else if (result.seq < memo.seq) {\n                return result;\n            } else {\n                return memo;\n            }\n        }, { ok: true, seq: 0 });\n    }\n};\n\nexports.data_records_by_form_year_week_clinic_id_and_reported_date = {\n    map: function (doc) {\n        if (doc.type === 'data_record'\n                && doc.related_entities\n                && doc.related_entities.clinic\n                && doc.year\n                && (doc.week || doc.week_number)\n                && doc.form\n                && doc.reported_date) {\n            emit([\n                doc.form,\n                doc.year,\n                doc.week || doc.week_number,\n                doc.related_entities.clinic._id,\n                doc.reported_date\n            ], null);\n        }\n    }\n};\n\nexports.data_records_by_form_year_month_clinic_id_and_reported_date = {\n    map: function (doc) {\n        if (doc.type === 'data_record'\n                && doc.related_entities\n                && doc.related_entities.clinic\n                && doc.year\n                && doc.month\n                && doc.form\n                && doc.reported_date) {\n            emit([\n                doc.form,\n                doc.year,\n                doc.month,\n                doc.related_entities.clinic._id,\n                doc.reported_date\n            ], null);\n        }\n    }\n};\n\nexports.sent_reminders = {\n    map: function(doc) {\n        if (Array.isArray(doc.tasks)) {\n            doc.tasks.forEach(function(task) {\n                if (task.code && task.ts) {\n                    emit([task.code, task.ts], null);\n                }\n            });\n        }\n    }\n}\n\n"
    },
    "filters": {
        "lib": {
            "transition": "var _ = require('underscore');\n\nexports.completed = function(doc, key) {\n    var transitions = doc.transitions || [];\n\n    return _.contains(transitions, key);\n}\n"
        },
        "update_clinics": "function(){return require(\"lib/index\")[\"filters\"][\"update_clinics\"].apply(this, arguments);}",
        "update_scheduled_reports": "function(){return require(\"lib/index\")[\"filters\"][\"update_scheduled_reports\"].apply(this, arguments);}",
        "ohw_birth_report": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_birth_report\"].apply(this, arguments);}",
        "ohw_emergency_report": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_emergency_report\"].apply(this, arguments);}",
        "ohw_notifications": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_notifications\"].apply(this, arguments);}",
        "ohw_registration": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_registration\"].apply(this, arguments);}",
        "ohw_counseling": "function(){return require(\"lib/index\")[\"filters\"][\"ohw_counseling\"].apply(this, arguments);}",
        "twilio_message": "function(){return require(\"lib/index\")[\"filters\"][\"twilio_message\"].apply(this, arguments);}",
        "config_docs": "function(){return require(\"lib/index\")[\"filters\"][\"config_docs\"].apply(this, arguments);}",
        "update_sent_by": "function(){return require(\"lib/index\")[\"filters\"][\"update_sent_by\"].apply(this, arguments);}",
        "update_sent_forms": "function(){return require(\"lib/index\")[\"filters\"][\"update_sent_forms\"].apply(this, arguments);}"
    },
    "views": {
        "patient_ids_by_form_clinic_and_reported_date": {
            "map": "function (doc) {\n        if (!doc.patient_id\n            || !doc.reported_date\n            || !doc.related_entities\n            || !doc.related_entities.clinic\n            || !doc.form) return;\n        var cl_id = doc.related_entities.clinic._id;\n        emit([doc.form, doc.patient_id, cl_id, doc.reported_date], null);\n    }"
        },
        "serial_numbers_by_form_clinic_and_reported_date": {
            "map": "function (doc) {\n        if (!doc.serial_number\n            || !doc.reported_date\n            || !doc.related_entities\n            || !doc.related_entities.clinic\n            || !doc.form) return;\n        var cl_id = doc.related_entities.clinic._id;\n        emit([doc.form, doc.serial_number, cl_id, doc.reported_date], null);\n    }"
        },
        "due_tasks": {
            "map": "function (doc) {\n        var tasks = doc.scheduled_tasks || [];\n\n        tasks.forEach(function(task, index) {\n            if (task.due && task.state === 'scheduled') {\n                emit(task.due, task);\n            }\n        });\n    }"
        },
        "clinic_by_phone": {
            "map": "function (doc) {\n        if (doc.type === 'clinic' && doc.contact && doc.contact.phone) {\n            emit([doc.contact.phone], null);\n        }\n    }"
        },
        "clinic_by_refid": {
            "map": "function (doc) {\n        if (doc.type === 'clinic' && doc.contact && doc.contact.rc_code) {\n            // need String because rewriter wraps everything in quotes\n            emit([String(doc.contact.rc_code)], null);\n        }\n    }"
        },
        "ohw_registered_patients": {
            "map": "function (doc) {\n        if (doc.form === 'ORPT' && doc.patient_id) {\n            emit(doc.patient_id, null);\n        }\n    }"
        },
        "registered_patients": {
            "map": "function (doc) {\n        if (doc.form && doc.patient_id) {\n            emit(doc.patient_id, null);\n        }\n    }"
        },
        "last_valid_seq": {
            "map": "function (doc) {\n        var transitions = doc.transitions || {};\n            keys = Object.keys(transitions);\n\n        keys.forEach(function(key) {\n            emit(key, transitions[key]);\n        });\n    }",
            "reduce": "function (keys, values) {\n        return values.reduce(function(memo, result) {\n            if (memo.ok) {\n                if (!result.ok || result.seq > memo.seq) {\n                   return result;\n                } else {\n                   return memo;\n                }\n            } else if (result.seq < memo.seq) {\n                return result;\n            } else {\n                return memo;\n            }\n        }, { ok: true, seq: 0 });\n    }"
        },
        "data_records_by_form_year_week_clinic_id_and_reported_date": {
            "map": "function (doc) {\n        if (doc.type === 'data_record'\n                && doc.related_entities\n                && doc.related_entities.clinic\n                && doc.year\n                && (doc.week || doc.week_number)\n                && doc.form\n                && doc.reported_date) {\n            emit([\n                doc.form,\n                doc.year,\n                doc.week || doc.week_number,\n                doc.related_entities.clinic._id,\n                doc.reported_date\n            ], null);\n        }\n    }"
        },
        "data_records_by_form_year_month_clinic_id_and_reported_date": {
            "map": "function (doc) {\n        if (doc.type === 'data_record'\n                && doc.related_entities\n                && doc.related_entities.clinic\n                && doc.year\n                && doc.month\n                && doc.form\n                && doc.reported_date) {\n            emit([\n                doc.form,\n                doc.year,\n                doc.month,\n                doc.related_entities.clinic._id,\n                doc.reported_date\n            ], null);\n        }\n    }"
        },
        "sent_reminders": {
            "map": "function (doc) {\n        if (Array.isArray(doc.tasks)) {\n            doc.tasks.forEach(function(task) {\n                if (task.code && task.ts) {\n                    emit([task.code, task.ts], null);\n                }\n            });\n        }\n    }"
        }
    },
    "rewrites": [],
    "_attachments": {
        "modules.js": {
            "content_type": "application/json; charset=utf-8",
            "data": "LypnbG9iYWwgd2luZG93OiBmYWxzZSwgJDogZmFsc2UsIHBhZ2VUcmFja2VyOiBmYWxzZSwga2Fuc286IHRydWUgKi8KCi8qKgogKiBDb2RlIHJlcXVpcmVkIHRvIGJvb3RzdHJhcCB0aGUgYnJvd3NlciBDb21tb25KUyBlbnZpcm9ubWVudC4KICovCgooZnVuY3Rpb24gKGV4cG9ydHMpIHsKCiAgICBleHBvcnRzLm1vZHVsZUNhY2hlID0ge307CgogICAgZXhwb3J0cy5ub3JtYWxpemVQYXRoID0gZnVuY3Rpb24gKHApIHsKICAgICAgICB2YXIgcGF0aCA9IFtdOwogICAgICAgIHZhciBwYXJ0cyA9IHAuc3BsaXQoJy8nKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gJy4uJykgewogICAgICAgICAgICAgICAgcGF0aC5wb3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChwYXJ0c1tpXSAhPT0gJy4nKSB7CiAgICAgICAgICAgICAgICBwYXRoLnB1c2gocGFydHNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXRoLmpvaW4oJy8nKTsKICAgIH07CgogICAgZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24gKHApIHsKICAgICAgICBpZiAocCA9PT0gJy8nKSB7CiAgICAgICAgICAgIHJldHVybiBwOwogICAgICAgIH0KICAgICAgICB2YXIgcGFydHMgPSBwLnNwbGl0KCcvJyk7CiAgICAgICAgcGFydHMucG9wKCk7CiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSAmJiBwYXJ0c1swXSA9PT0gJycpIHsKICAgICAgICAgICAgcmV0dXJuICcvJzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJy8nKTsKICAgIH07CgogICAgZXhwb3J0cy5jcmVhdGVSZXF1aXJlID0gZnVuY3Rpb24gKGN1cnJlbnQpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgewogICAgICAgICAgICB2YXIgcGF0aDsKICAgICAgICAgICAgaWYgKHRhcmdldC5jaGFyQXQoMCkgPT09ICcuJykgewogICAgICAgICAgICAgICAgdmFyIGRpciA9IGV4cG9ydHMuZGlybmFtZShjdXJyZW50KTsKICAgICAgICAgICAgICAgIHBhdGggPSBleHBvcnRzLm5vcm1hbGl6ZVBhdGgoZGlyICsgJy8nICsgdGFyZ2V0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHBhdGggPSBleHBvcnRzLm5vcm1hbGl6ZVBhdGgodGFyZ2V0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgbSA9IGthbnNvLm1vZHVsZUNhY2hlW3BhdGhdOwogICAgICAgICAgICBpZiAoIW0pIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc3VjaCBtb2R1bGU6ICcgKyBwYXRoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIW0ubG9hZGVkKSB7CiAgICAgICAgICAgICAgICBtLmV4cG9ydHMgPSB7fTsKICAgICAgICAgICAgICAgIG0uaWQgPSBwYXRoOwogICAgICAgICAgICAgICAgLy8gVE9ETzogcHJvcGVydHkgbm90IHByb3ZpZGVkIGJ5IGNvdWNoZGIsIGJ1dCBpcyBieSBub2RlOgogICAgICAgICAgICAgICAgLy9tLnJlcXVpcmUgPSBleHBvcnRzLmNyZWF0ZVJlcXVpcmUocGF0aCk7CiAgICAgICAgICAgICAgICAvLyBUT0RPOiBwcm9wZXJ0eSBub3QgcHJvdmlkZWQgYnkgY291Y2hkYiwgYnV0IGlzIGJ5IG5vZGU6CiAgICAgICAgICAgICAgICAvL20uZmlsZW5hbWUgPSAnJzsKICAgICAgICAgICAgICAgIC8vIFRPRE86IG1vZHVsZSBwcm9wZXJ0aWVzIHByb3ZpZGVkIGJ5IGNvdWNoZGIsIGJ1dCBub3QgYnkga2Fuc28KICAgICAgICAgICAgICAgIC8vICogY3VycmVudAogICAgICAgICAgICAgICAgLy8gKiBwYXJlbnQKICAgICAgICAgICAgICAgIC8vIHNldCB0aGlzIHRvIHRydWUgKmJlZm9yZSogY2FsbGluZyBtLmxvYWQgc28gY2lyY3VsYXIKICAgICAgICAgICAgICAgIC8vIHJlcXVpcmVzIGRvbid0IGJsb3cgdGhlIGNhbGwgc3RhY2sKICAgICAgICAgICAgICAgIG0ubG9hZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIC8vbS5sb2FkKG0sIG0uZXhwb3J0cywgbS5yZXF1aXJlKTsKICAgICAgICAgICAgICAgIG0ubG9hZChtLCBtLmV4cG9ydHMsIGV4cG9ydHMuY3JlYXRlUmVxdWlyZShwYXRoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG0uZXhwb3J0czsKICAgICAgICB9OwogICAgfTsKCiAgICBpZiAodHlwZW9mIHJlcXVpcmUgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgLy8gbWFrZSByZXF1aXJlIGF2YWlsYWJsZSBnbG9iYWxseSwgdW5sZXNzIGFscmVhZHkgaW4gYSBjb21tb25qcwogICAgICAgIC8vIGVudmlyb25tZW50CiAgICAgICAgdGhpcy5yZXF1aXJlID0gZXhwb3J0cy5jcmVhdGVSZXF1aXJlKCcnKTsKICAgIH0KCn0oKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJykgPyB0aGlzLmthbnNvID0ge306IG1vZHVsZS5leHBvcnRzKSk7CgoKLyoqCiAqIENvbW1vbkpTIG1vZHVsZXMgYXJlIHdyYXBwZWQgYW5kIGFwcGVuZGVkIHRvIHRoaXMgZmlsZS4KICovCi8qKioqKioqKioqIGxpYi9maWx0ZXJzICoqKioqKioqKiovCgprYW5zby5tb2R1bGVDYWNoZVsibGliL2ZpbHRlcnMiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKZXhwb3J0cy51cGRhdGVfY2xpbmljcyA9IGZ1bmN0aW9uKGRvYykgewogICAgcmV0dXJuIGRvYy5mb3JtICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMgJiYKICAgICAgICAhZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljOwp9OwoKZXhwb3J0cy51cGRhdGVfc2NoZWR1bGVkX3JlcG9ydHMgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuZm9ybSAmJgogICAgICAgIGRvYy55ZWFyICYmCiAgICAgICAgKGRvYy5tb250aCB8fCBkb2Mud2VlayB8fCBkb2Mud2Vla19udW1iZXIpICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcy5jbGluaWM7Cn07CgpleHBvcnRzLm9od19iaXJ0aF9yZXBvcnQgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuZm9ybSA9PT0gJ09CSVInICYmCiAgICAgICAgZG9jLnBhdGllbnRfaWQgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcyAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYzsKfTsKCmV4cG9ydHMub2h3X2VtZXJnZW5jeV9yZXBvcnQgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuZm9ybSA9PT0gJ09FTVInICYmCiAgICAgICAgZG9jLnBhdGllbnRfaWQgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcyAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYzsKfTsKCmV4cG9ydHMub2h3X25vdGlmaWNhdGlvbnMgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuZm9ybSA9PT0gJ09OT1QnICYmCiAgICAgICAgZG9jLnBhdGllbnRfaWQgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcyAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYzsKfTsKCmV4cG9ydHMub2h3X3JlZ2lzdHJhdGlvbiA9IGZ1bmN0aW9uKGRvYykgewogICAgcmV0dXJuIGRvYy5mb3JtID09PSAnT1JQVCcgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcyAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYyAmJgogICAgICAgICFkb2MucGF0aWVudF9pZDsKfTsKCmV4cG9ydHMub2h3X2NvdW5zZWxpbmcgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuZm9ybSA9PT0gJ09BUEMnICYmCiAgICAgICAgZG9jLnBhdGllbnRfaWQgJiYKICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcyAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYzsKfTsKCmV4cG9ydHMudHdpbGlvX21lc3NhZ2UgPSBmdW5jdGlvbihkb2MpIHsKICAgIHZhciB0YXNrcyA9IGRvYy50YXNrcyB8fCBbXTsKCiAgICByZXR1cm4gdGFza3Muc29tZShmdW5jdGlvbih0YXNrKSB7CiAgICAgICAgcmV0dXJuIHRhc2suc3RhdGUgPT09ICdwZW5kaW5nJzsKICAgIH0pOwp9OwoKLyogZG9jdW1lbnRzIHdoZXJlIGNvbmZpZ3VyYXRpb24gY2hhbmdlcyBsaXZlICovCmV4cG9ydHMuY29uZmlnX2RvY3MgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuX2lkID09PSAnX2Rlc2lnbi9rdWp1YS1saXRlJzsKfTsKCmV4cG9ydHMudXBkYXRlX3NlbnRfYnkgPSBmdW5jdGlvbihkb2MpIHsKICAgIHJldHVybiBkb2MuZnJvbSAmJiBkb2MudHlwZSA9PT0gJ2RhdGFfcmVjb3JkJyAmJiBkb2Muc2VudF9ieSA9PT0gdW5kZWZpbmVkOwp9CgpleHBvcnRzLnVwZGF0ZV9zZW50X2Zvcm1zID0gZnVuY3Rpb24oZG9jKSB7CiAgICByZXR1cm4gZG9jLmZvcm0gJiYKICAgICAgICBkb2MucmVwb3J0ZWRfZGF0ZSAmJgogICAgICAgIGRvYy5yZWxhdGVkX2VudGl0aWVzICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljICYmCiAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljLl9pZDsKfQoKCn0pfTsKCi8qKioqKioqKioqIGxpYi9pbmRleCAqKioqKioqKioqLwoKa2Fuc28ubW9kdWxlQ2FjaGVbImxpYi9pbmRleCJdID0ge2xvYWQ6IChmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzLCByZXF1aXJlKSB7CgpleHBvcnRzLnZpZXdzID0gcmVxdWlyZSgnLi92aWV3cycpOwpleHBvcnRzLmZpbHRlcnMgPSByZXF1aXJlKCcuL2ZpbHRlcnMnKTsKCgp9KX07CgovKioqKioqKioqKiBsaWIvdmlld3MgKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJsaWIvdmlld3MiXSA9IHtsb2FkOiAoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSkgewoKZXhwb3J0cy5wYXRpZW50X2lkc19ieV9mb3JtX2NsaW5pY19hbmRfcmVwb3J0ZWRfZGF0ZSA9IHsKICAgIG1hcDogZnVuY3Rpb24oZG9jKSB7CiAgICAgICAgaWYgKCFkb2MucGF0aWVudF9pZAogICAgICAgICAgICB8fCAhZG9jLnJlcG9ydGVkX2RhdGUKICAgICAgICAgICAgfHwgIWRvYy5yZWxhdGVkX2VudGl0aWVzCiAgICAgICAgICAgIHx8ICFkb2MucmVsYXRlZF9lbnRpdGllcy5jbGluaWMKICAgICAgICAgICAgfHwgIWRvYy5mb3JtKSByZXR1cm47CiAgICAgICAgdmFyIGNsX2lkID0gZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljLl9pZDsKICAgICAgICBlbWl0KFtkb2MuZm9ybSwgZG9jLnBhdGllbnRfaWQsIGNsX2lkLCBkb2MucmVwb3J0ZWRfZGF0ZV0sIG51bGwpOwogICAgfQp9OwoKZXhwb3J0cy5zZXJpYWxfbnVtYmVyc19ieV9mb3JtX2NsaW5pY19hbmRfcmVwb3J0ZWRfZGF0ZSA9IHsKICAgIG1hcDogZnVuY3Rpb24oZG9jKSB7CiAgICAgICAgaWYgKCFkb2Muc2VyaWFsX251bWJlcgogICAgICAgICAgICB8fCAhZG9jLnJlcG9ydGVkX2RhdGUKICAgICAgICAgICAgfHwgIWRvYy5yZWxhdGVkX2VudGl0aWVzCiAgICAgICAgICAgIHx8ICFkb2MucmVsYXRlZF9lbnRpdGllcy5jbGluaWMKICAgICAgICAgICAgfHwgIWRvYy5mb3JtKSByZXR1cm47CiAgICAgICAgdmFyIGNsX2lkID0gZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljLl9pZDsKICAgICAgICBlbWl0KFtkb2MuZm9ybSwgZG9jLnNlcmlhbF9udW1iZXIsIGNsX2lkLCBkb2MucmVwb3J0ZWRfZGF0ZV0sIG51bGwpOwogICAgfQp9OwoKZXhwb3J0cy5kdWVfdGFza3MgPSB7CiAgICBtYXA6IGZ1bmN0aW9uKGRvYykgewogICAgICAgIHZhciB0YXNrcyA9IGRvYy5zY2hlZHVsZWRfdGFza3MgfHwgW107CgogICAgICAgIHRhc2tzLmZvckVhY2goZnVuY3Rpb24odGFzaywgaW5kZXgpIHsKICAgICAgICAgICAgaWYgKHRhc2suZHVlICYmIHRhc2suc3RhdGUgPT09ICdzY2hlZHVsZWQnKSB7CiAgICAgICAgICAgICAgICBlbWl0KHRhc2suZHVlLCB0YXNrKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQp9OwoKLyoKICogR2V0IGNsaW5pYyBiYXNlZCBvbiBwaG9uZSBudW1iZXIKICovCmV4cG9ydHMuY2xpbmljX2J5X3Bob25lID0gewogICAgbWFwOiBmdW5jdGlvbihkb2MpIHsKICAgICAgICBpZiAoZG9jLnR5cGUgPT09ICdjbGluaWMnICYmIGRvYy5jb250YWN0ICYmIGRvYy5jb250YWN0LnBob25lKSB7CiAgICAgICAgICAgIGVtaXQoW2RvYy5jb250YWN0LnBob25lXSwgbnVsbCk7CiAgICAgICAgfQogICAgfQp9OwoKLyoKICogR2V0IGNsaW5pYyBiYXNlZCBvbiByZWZlcmVuY2UgaWQKICovCmV4cG9ydHMuY2xpbmljX2J5X3JlZmlkID0gewogICAgbWFwOiBmdW5jdGlvbiAoZG9jKSB7CiAgICAgICAgaWYgKGRvYy50eXBlID09PSAnY2xpbmljJyAmJiBkb2MuY29udGFjdCAmJiBkb2MuY29udGFjdC5yY19jb2RlKSB7CiAgICAgICAgICAgIC8vIG5lZWQgU3RyaW5nIGJlY2F1c2UgcmV3cml0ZXIgd3JhcHMgZXZlcnl0aGluZyBpbiBxdW90ZXMKICAgICAgICAgICAgZW1pdChbU3RyaW5nKGRvYy5jb250YWN0LnJjX2NvZGUpXSwgbnVsbCk7CiAgICAgICAgfQogICAgfQp9OwoKZXhwb3J0cy5vaHdfcmVnaXN0ZXJlZF9wYXRpZW50cyA9IHsKICAgIG1hcDogZnVuY3Rpb24oZG9jKSB7CiAgICAgICAgaWYgKGRvYy5mb3JtID09PSAnT1JQVCcgJiYgZG9jLnBhdGllbnRfaWQpIHsKICAgICAgICAgICAgZW1pdChkb2MucGF0aWVudF9pZCwgbnVsbCk7CiAgICAgICAgfQogICAgfQp9OwoKZXhwb3J0cy5yZWdpc3RlcmVkX3BhdGllbnRzID0gewogICAgbWFwOiBmdW5jdGlvbihkb2MpIHsKICAgICAgICBpZiAoZG9jLmZvcm0gJiYgZG9jLnBhdGllbnRfaWQpIHsKICAgICAgICAgICAgZW1pdChkb2MucGF0aWVudF9pZCwgbnVsbCk7CiAgICAgICAgfQogICAgfQp9CgpleHBvcnRzLmxhc3RfdmFsaWRfc2VxID0gewogICAgbWFwOiBmdW5jdGlvbihkb2MpIHsKICAgICAgICB2YXIgdHJhbnNpdGlvbnMgPSBkb2MudHJhbnNpdGlvbnMgfHwge307CiAgICAgICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh0cmFuc2l0aW9ucyk7CgogICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgICAgICAgICAgZW1pdChrZXksIHRyYW5zaXRpb25zW2tleV0pOwogICAgICAgIH0pOwogICAgfSwgcmVkdWNlOiBmdW5jdGlvbihrZXlzLCB2YWx1ZXMpIHsKICAgICAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbihtZW1vLCByZXN1bHQpIHsKICAgICAgICAgICAgaWYgKG1lbW8ub2spIHsKICAgICAgICAgICAgICAgIGlmICghcmVzdWx0Lm9rIHx8IHJlc3VsdC5zZXEgPiBtZW1vLnNlcSkgewogICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtbzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuc2VxIDwgbWVtby5zZXEpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWVtbzsKICAgICAgICAgICAgfQogICAgICAgIH0sIHsgb2s6IHRydWUsIHNlcTogMCB9KTsKICAgIH0KfTsKCmV4cG9ydHMuZGF0YV9yZWNvcmRzX2J5X2Zvcm1feWVhcl93ZWVrX2NsaW5pY19pZF9hbmRfcmVwb3J0ZWRfZGF0ZSA9IHsKICAgIG1hcDogZnVuY3Rpb24gKGRvYykgewogICAgICAgIGlmIChkb2MudHlwZSA9PT0gJ2RhdGFfcmVjb3JkJwogICAgICAgICAgICAgICAgJiYgZG9jLnJlbGF0ZWRfZW50aXRpZXMKICAgICAgICAgICAgICAgICYmIGRvYy5yZWxhdGVkX2VudGl0aWVzLmNsaW5pYwogICAgICAgICAgICAgICAgJiYgZG9jLnllYXIKICAgICAgICAgICAgICAgICYmIChkb2Mud2VlayB8fCBkb2Mud2Vla19udW1iZXIpCiAgICAgICAgICAgICAgICAmJiBkb2MuZm9ybQogICAgICAgICAgICAgICAgJiYgZG9jLnJlcG9ydGVkX2RhdGUpIHsKICAgICAgICAgICAgZW1pdChbCiAgICAgICAgICAgICAgICBkb2MuZm9ybSwKICAgICAgICAgICAgICAgIGRvYy55ZWFyLAogICAgICAgICAgICAgICAgZG9jLndlZWsgfHwgZG9jLndlZWtfbnVtYmVyLAogICAgICAgICAgICAgICAgZG9jLnJlbGF0ZWRfZW50aXRpZXMuY2xpbmljLl9pZCwKICAgICAgICAgICAgICAgIGRvYy5yZXBvcnRlZF9kYXRlCiAgICAgICAgICAgIF0sIG51bGwpOwogICAgICAgIH0KICAgIH0KfTsKCmV4cG9ydHMuZGF0YV9yZWNvcmRzX2J5X2Zvcm1feWVhcl9tb250aF9jbGluaWNfaWRfYW5kX3JlcG9ydGVkX2RhdGUgPSB7CiAgICBtYXA6IGZ1bmN0aW9uIChkb2MpIHsKICAgICAgICBpZiAoZG9jLnR5cGUgPT09ICdkYXRhX3JlY29yZCcKICAgICAgICAgICAgICAgICYmIGRvYy5yZWxhdGVkX2VudGl0aWVzCiAgICAgICAgICAgICAgICAmJiBkb2MucmVsYXRlZF9lbnRpdGllcy5jbGluaWMKICAgICAgICAgICAgICAgICYmIGRvYy55ZWFyCiAgICAgICAgICAgICAgICAmJiBkb2MubW9udGgKICAgICAgICAgICAgICAgICYmIGRvYy5mb3JtCiAgICAgICAgICAgICAgICAmJiBkb2MucmVwb3J0ZWRfZGF0ZSkgewogICAgICAgICAgICBlbWl0KFsKICAgICAgICAgICAgICAgIGRvYy5mb3JtLAogICAgICAgICAgICAgICAgZG9jLnllYXIsCiAgICAgICAgICAgICAgICBkb2MubW9udGgsCiAgICAgICAgICAgICAgICBkb2MucmVsYXRlZF9lbnRpdGllcy5jbGluaWMuX2lkLAogICAgICAgICAgICAgICAgZG9jLnJlcG9ydGVkX2RhdGUKICAgICAgICAgICAgXSwgbnVsbCk7CiAgICAgICAgfQogICAgfQp9OwoKZXhwb3J0cy5zZW50X3JlbWluZGVycyA9IHsKICAgIG1hcDogZnVuY3Rpb24oZG9jKSB7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZG9jLnRhc2tzKSkgewogICAgICAgICAgICBkb2MudGFza3MuZm9yRWFjaChmdW5jdGlvbih0YXNrKSB7CiAgICAgICAgICAgICAgICBpZiAodGFzay5jb2RlICYmIHRhc2sudHMpIHsKICAgICAgICAgICAgICAgICAgICBlbWl0KFt0YXNrLmNvZGUsIHRhc2sudHNdLCBudWxsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQp9CgoKCn0pfTsKCi8qKioqKioqKioqIGZpbHRlcnMvbGliL3RyYW5zaXRpb24gKioqKioqKioqKi8KCmthbnNvLm1vZHVsZUNhY2hlWyJmaWx0ZXJzL2xpYi90cmFuc2l0aW9uIl0gPSB7bG9hZDogKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUpIHsKCnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpOwoKZXhwb3J0cy5jb21wbGV0ZWQgPSBmdW5jdGlvbihkb2MsIGtleSkgewogICAgdmFyIHRyYW5zaXRpb25zID0gZG9jLnRyYW5zaXRpb25zIHx8IFtdOwoKICAgIHJldHVybiBfLmNvbnRhaW5zKHRyYW5zaXRpb25zLCBrZXkpOwp9CgoKfSl9OwoK"
        }
    },
    "kanso": {
        "config": {
            "name": "kujua-sentinel",
            "version": "0.0.1",
            "description": "Kujua Sentinel",
            "modules": [
                "lib",
                "filters"
            ],
            "load": "lib/index",
            "dependencies": {
                "modules": null,
                "properties": null
            },
            "minify": false
        },
        "build_time": "2013-09-04T02:28:36Z",
        "kanso_version": "0.3.1"
    }
}
